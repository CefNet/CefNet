// --------------------------------------------------------------------------------------------
// Copyright (c) 2019 The CefNet Authors. All rights reserved.
// Licensed under the MIT license.
// See the licence file in the project root for full license information.
// --------------------------------------------------------------------------------------------
// Generated by CefGen
// Source: Generated/Native/Types/cef_browser_process_handler_t.cs
// --------------------------------------------------------------------------------------------﻿
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
// --------------------------------------------------------------------------------------------

#pragma warning disable 0169, 1591, 1573

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using CefNet.WinApi;
using CefNet.CApi;
using CefNet.Internal;

namespace CefNet
{
	/// <summary>
	/// Structure used to implement browser process callbacks. The functions of this
	/// structure will be called on the browser process main thread unless otherwise
	/// indicated.
	/// </summary>
	/// <remarks>
	/// Role: Handler
	/// </remarks>
	public unsafe partial class CefBrowserProcessHandler : CefBaseRefCounted<cef_browser_process_handler_t>, ICefBrowserProcessHandlerPrivate
	{
#if NET_LESS_5_0
		private static readonly GetCookieableSchemesDelegate fnGetCookieableSchemes = GetCookieableSchemesImpl;

		private static readonly OnContextInitializedDelegate fnOnContextInitialized = OnContextInitializedImpl;

		private static readonly OnBeforeChildProcessLaunchDelegate fnOnBeforeChildProcessLaunch = OnBeforeChildProcessLaunchImpl;

		private static readonly GetPrintHandlerDelegate fnGetPrintHandler = GetPrintHandlerImpl;

		private static readonly OnScheduleMessagePumpWorkDelegate fnOnScheduleMessagePumpWork = OnScheduleMessagePumpWorkImpl;

		private static readonly GetDefaultClientDelegate fnGetDefaultClient = GetDefaultClientImpl;

#endif // NET_LESS_5_0
		internal static unsafe CefBrowserProcessHandler Create(IntPtr instance)
		{
			return new CefBrowserProcessHandler((cef_browser_process_handler_t*)instance);
		}

		public CefBrowserProcessHandler()
		{
			cef_browser_process_handler_t* self = this.NativeInstance;
			#if NET_LESS_5_0
			self->get_cookieable_schemes = (void*)Marshal.GetFunctionPointerForDelegate(fnGetCookieableSchemes);
			self->on_context_initialized = (void*)Marshal.GetFunctionPointerForDelegate(fnOnContextInitialized);
			self->on_before_child_process_launch = (void*)Marshal.GetFunctionPointerForDelegate(fnOnBeforeChildProcessLaunch);
			self->get_print_handler = (void*)Marshal.GetFunctionPointerForDelegate(fnGetPrintHandler);
			self->on_schedule_message_pump_work = (void*)Marshal.GetFunctionPointerForDelegate(fnOnScheduleMessagePumpWork);
			self->get_default_client = (void*)Marshal.GetFunctionPointerForDelegate(fnGetDefaultClient);
			#else
			self->get_cookieable_schemes = (delegate* unmanaged[Stdcall]<cef_browser_process_handler_t*, cef_string_list_t, int*, void>)&GetCookieableSchemesImpl;
			self->on_context_initialized = (delegate* unmanaged[Stdcall]<cef_browser_process_handler_t*, void>)&OnContextInitializedImpl;
			self->on_before_child_process_launch = (delegate* unmanaged[Stdcall]<cef_browser_process_handler_t*, cef_command_line_t*, void>)&OnBeforeChildProcessLaunchImpl;
			self->get_print_handler = (delegate* unmanaged[Stdcall]<cef_browser_process_handler_t*, cef_print_handler_t*>)&GetPrintHandlerImpl;
			self->on_schedule_message_pump_work = (delegate* unmanaged[Stdcall]<cef_browser_process_handler_t*, long, void>)&OnScheduleMessagePumpWorkImpl;
			self->get_default_client = (delegate* unmanaged[Stdcall]<cef_browser_process_handler_t*, cef_client_t*>)&GetDefaultClientImpl;
			#endif
		}

		public CefBrowserProcessHandler(cef_browser_process_handler_t* instance)
			: base((cef_base_ref_counted_t*)instance)
		{
		}

		[MethodImpl(MethodImplOptions.ForwardRef)]
		extern bool ICefBrowserProcessHandlerPrivate.AvoidGetCookieableSchemes();

		/// <summary>
		/// Called on the browser process UI thread to retrieve the list of schemes
		/// that should support cookies. If |include_defaults| is true (1) the default
		/// schemes (&quot;http&quot;, &quot;https&quot;, &quot;ws&quot; and &quot;wss&quot;) will also be supported. Providing
		/// an NULL |schemes| value and setting |include_defaults| to false (0) will
		/// disable all loading and saving of cookies.
		/// This state will apply to the cef_cookie_manager_t associated with the
		/// global cef_request_context_t. It will also be used as the initial state for
		/// any new cef_request_context_ts created by the client. After creating a new
		/// cef_request_context_t the cef_cookie_manager_t::SetSupportedSchemes
		/// function may be called on the associated cef_cookie_manager_t to futher
		/// override these values.
		/// </summary>
		protected internal unsafe virtual void GetCookieableSchemes(CefStringList schemes, ref int includeDefaults)
		{
		}

#if NET_LESS_5_0
		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private unsafe delegate void GetCookieableSchemesDelegate(cef_browser_process_handler_t* self, cef_string_list_t schemes, int* include_defaults);

#endif // NET_LESS_5_0
		// void (*)(_cef_browser_process_handler_t* self, cef_string_list_t schemes, int* include_defaults)*
#if !NET_LESS_5_0
		[UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
#endif
		private static unsafe void GetCookieableSchemesImpl(cef_browser_process_handler_t* self, cef_string_list_t schemes, int* include_defaults)
		{
			var instance = GetInstance((IntPtr)self) as CefBrowserProcessHandler;
			if (instance == null || ((ICefBrowserProcessHandlerPrivate)instance).AvoidGetCookieableSchemes())
			{
				return;
			}
			instance.GetCookieableSchemes(CefStringList.Wrap(schemes), ref *include_defaults);
		}

		/// <summary>
		/// Called on the browser process UI thread immediately after the CEF context
		/// has been initialized.
		/// </summary>
		protected internal unsafe virtual void OnContextInitialized()
		{
		}

#if NET_LESS_5_0
		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private unsafe delegate void OnContextInitializedDelegate(cef_browser_process_handler_t* self);

#endif // NET_LESS_5_0
		// void (*)(_cef_browser_process_handler_t* self)*
#if !NET_LESS_5_0
		[UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
#endif
		private static unsafe void OnContextInitializedImpl(cef_browser_process_handler_t* self)
		{
			var instance = GetInstance((IntPtr)self) as CefBrowserProcessHandler;
			if (instance == null)
			{
				return;
			}
			instance.OnContextInitialized();
		}

		[MethodImpl(MethodImplOptions.ForwardRef)]
		extern bool ICefBrowserProcessHandlerPrivate.AvoidOnBeforeChildProcessLaunch();

		/// <summary>
		/// Called before a child process is launched. Will be called on the browser
		/// process UI thread when launching a render process and on the browser
		/// process IO thread when launching a GPU or plugin process. Provides an
		/// opportunity to modify the child process command line. Do not keep a
		/// reference to |command_line| outside of this function.
		/// </summary>
		protected internal unsafe virtual void OnBeforeChildProcessLaunch(CefCommandLine commandLine)
		{
		}

#if NET_LESS_5_0
		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private unsafe delegate void OnBeforeChildProcessLaunchDelegate(cef_browser_process_handler_t* self, cef_command_line_t* command_line);

#endif // NET_LESS_5_0
		// void (*)(_cef_browser_process_handler_t* self, _cef_command_line_t* command_line)*
#if !NET_LESS_5_0
		[UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
#endif
		private static unsafe void OnBeforeChildProcessLaunchImpl(cef_browser_process_handler_t* self, cef_command_line_t* command_line)
		{
			var instance = GetInstance((IntPtr)self) as CefBrowserProcessHandler;
			if (instance == null || ((ICefBrowserProcessHandlerPrivate)instance).AvoidOnBeforeChildProcessLaunch())
			{
				ReleaseIfNonNull((cef_base_ref_counted_t*)command_line);
				return;
			}
			instance.OnBeforeChildProcessLaunch(CefCommandLine.Wrap(CefCommandLine.Create, command_line));
		}

		/// <summary>
		/// Return the handler for printing on Linux. If a print handler is not
		/// provided then printing will not be supported on the Linux platform.
		/// </summary>
		protected internal unsafe virtual CefPrintHandler GetPrintHandler()
		{
			return default;
		}

#if NET_LESS_5_0
		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private unsafe delegate cef_print_handler_t* GetPrintHandlerDelegate(cef_browser_process_handler_t* self);

#endif // NET_LESS_5_0
		// _cef_print_handler_t* (*)(_cef_browser_process_handler_t* self)*
#if !NET_LESS_5_0
		[UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
#endif
		private static unsafe cef_print_handler_t* GetPrintHandlerImpl(cef_browser_process_handler_t* self)
		{
			var instance = GetInstance((IntPtr)self) as CefBrowserProcessHandler;
			if (instance == null)
			{
				return default;
			}
			CefPrintHandler rv = instance.GetPrintHandler();
			if (rv == null)
				return null;
			return (rv != null) ? rv.GetNativeInstance() : null;
		}

		[MethodImpl(MethodImplOptions.ForwardRef)]
		extern bool ICefBrowserProcessHandlerPrivate.AvoidOnScheduleMessagePumpWork();

		/// <summary>
		/// Called from any thread when work has been scheduled for the browser process
		/// main (UI) thread. This callback is used in combination with CefSettings.
		/// external_message_pump and cef_do_message_loop_work() in cases where the CEF
		/// message loop must be integrated into an existing application message loop
		/// (see additional comments and warnings on CefDoMessageLoopWork). This
		/// callback should schedule a cef_do_message_loop_work() call to happen on the
		/// main (UI) thread. |delay_ms| is the requested delay in milliseconds. If
		/// |delay_ms| is
		/// &lt;
		/// = 0 then the call should happen reasonably soon. If
		/// |delay_ms| is &gt; 0 then the call should be scheduled to happen after the
		/// specified delay and any currently pending scheduled call should be
		/// cancelled.
		/// </summary>
		protected internal unsafe virtual void OnScheduleMessagePumpWork(long delayMs)
		{
		}

#if NET_LESS_5_0
		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private unsafe delegate void OnScheduleMessagePumpWorkDelegate(cef_browser_process_handler_t* self, long delay_ms);

#endif // NET_LESS_5_0
		// void (*)(_cef_browser_process_handler_t* self, int64 delay_ms)*
#if !NET_LESS_5_0
		[UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
#endif
		private static unsafe void OnScheduleMessagePumpWorkImpl(cef_browser_process_handler_t* self, long delay_ms)
		{
			var instance = GetInstance((IntPtr)self) as CefBrowserProcessHandler;
			if (instance == null || ((ICefBrowserProcessHandlerPrivate)instance).AvoidOnScheduleMessagePumpWork())
			{
				return;
			}
			instance.OnScheduleMessagePumpWork(delay_ms);
		}

		/// <summary>
		/// Return the default client for use with a newly created browser window. If
		/// null is returned the browser will be unmanaged (no callbacks will be
		/// executed for that browser) and application shutdown will be blocked until
		/// the browser window is closed manually. This function is currently only used
		/// with the chrome runtime.
		/// </summary>
		protected internal unsafe virtual CefClient GetDefaultClient()
		{
			return default;
		}

#if NET_LESS_5_0
		[UnmanagedFunctionPointer(CallingConvention.Winapi)]
		private unsafe delegate cef_client_t* GetDefaultClientDelegate(cef_browser_process_handler_t* self);

#endif // NET_LESS_5_0
		// _cef_client_t* (*)(_cef_browser_process_handler_t* self)*
#if !NET_LESS_5_0
		[UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvStdcall) })]
#endif
		private static unsafe cef_client_t* GetDefaultClientImpl(cef_browser_process_handler_t* self)
		{
			var instance = GetInstance((IntPtr)self) as CefBrowserProcessHandler;
			if (instance == null)
			{
				return default;
			}
			CefClient rv = instance.GetDefaultClient();
			if (rv == null)
				return null;
			return (rv != null) ? rv.GetNativeInstance() : null;
		}
	}
}
